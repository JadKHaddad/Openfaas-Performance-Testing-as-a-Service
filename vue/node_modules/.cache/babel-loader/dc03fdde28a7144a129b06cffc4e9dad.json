{"remainingRequest":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/thread-loader/dist/cjs.js!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/babel-loader/lib/index.js!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/src/views/Control.vue?vue&type=template&id=d2a763a6","dependencies":[{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/src/views/Control.vue","mtime":1641563910572},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/babel.config.js","mtime":1641563910552},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIHJlbmRlckxpc3QgYXMgX3JlbmRlckxpc3QsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBfY3JlYXRlRWxlbWVudEJsb2NrLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImNvbnRyb2wtYnRuLWNvbnRhaW5lciIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9JbnN0YWxsYXRpb25Qcm9jZXNzID0gX3Jlc29sdmVDb21wb25lbnQoIkluc3RhbGxhdGlvblByb2Nlc3MiKTsKCiAgdmFyIF9jb21wb25lbnRfVGVzdCA9IF9yZXNvbHZlQ29tcG9uZW50KCJUZXN0Iik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIG51bGwsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgdHlwZTogImJ1dHRvbiIsCiAgICBjbGFzczogImJ0biBidG4tZGFuZ2VyIGJ0bi1ibG9jayBjb250cm9sLWJ0biIsCiAgICBpZDogImtpbGwtYnRuIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVswXSB8fCAoX2NhY2hlWzBdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMua2lsbFJ1bm5pbmdUYXNrcyAmJiAkb3B0aW9ucy5raWxsUnVubmluZ1Rhc2tzLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSkKICB9LCAiIEtpbGwgcnVubmluZyB0YXNrcyAiKSwgX2NyZWF0ZUVsZW1lbnRWTm9kZSgiYnV0dG9uIiwgewogICAgdHlwZTogImJ1dHRvbiIsCiAgICBjbGFzczogImJ0biBidG4tZGFuZ2VyIGJ0bi1ibG9jayBjb250cm9sLWJ0biIsCiAgICBpZDogImNsZWFudXAtYnRuIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuZGVsZXRlQWxsUHJvamVjdHMgJiYgJG9wdGlvbnMuZGVsZXRlQWxsUHJvamVjdHMuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KQogIH0sICIgRGVsZXRlIGFsbCBwcm9qZWN0cyAiKV0pLCAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRkYXRhLnByb2plY3RzLCBmdW5jdGlvbiAocHJvamVjdCkgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfSW5zdGFsbGF0aW9uUHJvY2VzcywgewogICAgICBrZXk6IHByb2plY3QsCiAgICAgIGlkOiBwcm9qZWN0LAogICAgICB1cmw6ICRwcm9wcy51cmwsCiAgICAgIG9wZW5mYWFzVXJsOiAkcHJvcHMub3BlbmZhYXNVcmwsCiAgICAgIHNvY2tldDogJHByb3BzLnNvY2tldCwKICAgICAgb25EZWxldGU6IGZ1bmN0aW9uIG9uRGVsZXRlKCRldmVudCkgewogICAgICAgIHJldHVybiAkb3B0aW9ucy5kZWxldGVQcm9qZWN0KHByb2plY3QpOwogICAgICB9CiAgICB9LCBudWxsLCA4LCBbImlkIiwgInVybCIsICJvcGVuZmFhc1VybCIsICJzb2NrZXQiLCAib25EZWxldGUiXSk7CiAgfSksIDEyOCkpLCAoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRvcHRpb25zLnJldmVyc2VkVGVzdHMsIGZ1bmN0aW9uICh0ZXN0KSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9UZXN0LCB7CiAgICAgIGtleTogdGVzdFswXSwKICAgICAgaWQ6IHRlc3RbMF0sCiAgICAgIGluZm86IEpTT04ucGFyc2UodGVzdFsxXS5pbmZvKSwKICAgICAgZGF0YTogSlNPTi5wYXJzZSh0ZXN0WzFdLmRhdGEpLAogICAgICBzdGF0dXM6IHRlc3RbMV0uc3RhdHVzLAogICAgICB2YWxpZDogdGVzdFsxXS52YWxpZCwKICAgICAgc2hvd1BhdGg6IHRydWUsCiAgICAgIHVybDogJHByb3BzLnVybCwKICAgICAgb3BlbmZhYXNVcmw6ICRwcm9wcy5vcGVuZmFhc1VybCwKICAgICAgcGlkOiB0ZXN0WzFdLnByb2plY3RfbmFtZSwKICAgICAgc2lkOiB0ZXN0WzFdLnNjcmlwdF9uYW1lLAogICAgICBzdGFydE1pbmltaXplZDogJHByb3BzLm1pbmltaXplVGVzdHMsCiAgICAgIG9uUmVzdGFydDogJG9wdGlvbnMucmVzdGFydCwKICAgICAgb25EZWxldGU6ICRvcHRpb25zLmRlbGV0ZVRlc3QKICAgIH0sIG51bGwsIDgsIFsiaWQiLCAiaW5mbyIsICJkYXRhIiwgInN0YXR1cyIsICJ2YWxpZCIsICJ1cmwiLCAib3BlbmZhYXNVcmwiLCAicGlkIiwgInNpZCIsICJzdGFydE1pbmltaXplZCIsICJvblJlc3RhcnQiLCAib25EZWxldGUiXSk7CiAgfSksIDEyOCkpXSk7Cn0="},{"version":3,"sources":["/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/src/views/Control.vue"],"names":[],"mappings":";;AAES,EAAA,KAAK,EAAC;;;;;;;uBADb,mBAAA,CA+CM,KA/CN,EA+CM,IA/CN,EA+CM,CA9CJ,mBAAA,CAiBM,KAjBN,EAAA,UAAA,EAiBM,CAhBJ,mBAAA,CAOS,QAPT,EAOS;AANP,IAAA,IAAI,EAAC,QAME;AALP,IAAA,KAAK,EAAC,sCAKC;AAJP,IAAA,EAAE,EAAC,UAII;AAHN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,gBAAA,IAAA,QAAA,CAAA,gBAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAGC,GAPT,EAKC,sBALD,CAgBI,EARJ,mBAAA,CAOS,QAPT,EAOS;AANP,IAAA,IAAI,EAAC,QAME;AALP,IAAA,KAAK,EAAC,sCAKC;AAJP,IAAA,EAAE,EAAC,aAII;AAHN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,iBAAA,IAAA,QAAA,CAAA,iBAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAGC,GAPT,EAKC,uBALD,CAQI,CAjBN,CA8CI,G,kBA5BJ,mBAAA,CASsB,SATtB,EASsB,IATtB,EASsB,WAAA,CARF,KAAA,CAAA,QAQE,EARM,UAAnB,OAAmB,EAAZ;yBADhB,YAAA,CASsB,8BATtB,EASsB;AAPnB,MAAA,GAAG,EAAE,OAOc;AANnB,MAAA,EAAE,EAAE,OAMe;AALnB,MAAA,GAAG,EAAE,MAAA,CAAA,GAKc;AAJnB,MAAA,WAAW,EAAE,MAAA,CAAA,WAIM;AAHnB,MAAA,MAAM,EAAE,MAAA,CAAA,MAGW;AAFnB,MAAA,QAAM,EAAA,kBAAA,MAAA;AAAA,eAAE,QAAA,CAAA,aAAA,CAAc,OAAd,CAAF;AAAA;AAEa,KATtB,E,IAAA,E,CAAA,E,kDAAA,C;GASsB,CATtB,E,GAAA,CA4BI,I,kBAjBJ,mBAAA,CAgBQ,SAhBR,EAgBQ,IAhBR,EAgBQ,WAAA,CAfS,QAAA,CAAA,aAeT,EAfsB,UAArB,IAAqB,EAAjB;yBADb,YAAA,CAgBQ,eAhBR,EAgBQ;AAdL,MAAA,GAAG,EAAE,IAAI,CAAA,CAAA,CAcJ;AAbL,MAAA,EAAE,EAAE,IAAI,CAAA,CAAA,CAaH;AAZL,MAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAA,CAAA,CAAJ,CAAQ,IAAnB,CAYD;AAXL,MAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAA,CAAA,CAAJ,CAAQ,IAAnB,CAWD;AAVL,MAAA,MAAM,EAAE,IAAI,CAAA,CAAA,CAAJ,CAAQ,MAUX;AATL,MAAA,KAAK,EAAE,IAAI,CAAA,CAAA,CAAJ,CAAQ,KASV;AARL,MAAA,QAAQ,EAAE,IAQL;AAPL,MAAA,GAAG,EAAE,MAAA,CAAA,GAOA;AANL,MAAA,WAAW,EAAE,MAAA,CAAA,WAMR;AALL,MAAA,GAAG,EAAE,IAAI,CAAA,CAAA,CAAJ,CAAQ,YAKR;AAJL,MAAA,GAAG,EAAE,IAAI,CAAA,CAAA,CAAJ,CAAQ,WAIR;AAHL,MAAA,cAAc,EAAE,MAAA,CAAA,aAGX;AAFL,MAAA,SAAO,EAAE,QAAA,CAAA,OAEJ;AADL,MAAA,QAAM,EAAE,QAAA,CAAA;AACH,KAhBR,E,IAAA,E,CAAA,E,wHAAA,C;GAgBQ,CAhBR,E,GAAA,CAiBI,EA/CN,C","sourcesContent":["<template>\n  <div>\n    <div class=\"control-btn-container\">\n      <button\n        type=\"button\"\n        class=\"btn btn-danger btn-block control-btn\"\n        id=\"kill-btn\"\n        @click=\"killRunningTasks\"\n      >\n        Kill running tasks\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-danger btn-block control-btn\"\n        id=\"cleanup-btn\"\n        @click=\"deleteAllProjects\"\n      >\n        Delete all projects\n      </button>\n    </div>\n    <InstallationProcess\n      v-for=\"project in projects\"\n      :key=\"project\"\n      :id=\"project\"\n      :url=\"url\"\n      :openfaasUrl=\"openfaasUrl\"\n      :socket=\"socket\"\n      @delete=\"deleteProject(project)\"\n    >\n    </InstallationProcess>\n\n    <Test\n      v-for=\"test in reversedTests\"\n      :key=\"test[0]\"\n      :id=\"test[0]\"\n      :info=\"JSON.parse(test[1].info)\"\n      :data=\"JSON.parse(test[1].data)\"\n      :status=\"test[1].status\"\n      :valid=\"test[1].valid\"\n      :showPath=\"true\"\n      :url=\"url\"\n      :openfaasUrl=\"openfaasUrl\"\n      :pid=\"test[1].project_name\"\n      :sid=\"test[1].script_name\"\n      :startMinimized=\"minimizeTests\"\n      @restart=\"restart\"\n      @delete=\"deleteTest\"\n    ></Test>\n  </div>\n</template>\n\n<script>\nimport Test from \"@/components/Test.vue\";\nimport InstallationProcess from \"@/components/InstallationProcess.vue\";\n\nexport default {\n  name: \"Control\",\n  components: {\n    Test,\n    InstallationProcess,\n  },\n  props: [\"url\", \"openfaasUrl\", \"socket\", \"minimizeTests\", \"update\"],\n  data() {\n    return {\n      tests: {},\n      projects: [],\n    };\n  },\n  methods: {\n    register() {\n      this.socket.off(this.openfaasUrl + \"_control\");\n      this.socket.emit(\"register_control\", { openfaasurl: this.openfaasUrl });\n      this.socket.on(this.openfaasUrl + \"_control\", (msg) => {\n        if (IsJsonString(msg)) {\n          msg = JSON.parse(msg);\n          if (msg.success) {\n            if (\n              Object.keys(msg.tests).length >= Object.keys(this.tests).length\n            ) {\n              for (var key in msg.tests) {\n                //console.log(msg.tests[key]);\n                const id = msg.tests[key].id;\n                if (id in this.tests) {\n                  this.tests[id].data = msg.tests[key].data;\n                  this.tests[id].valid = msg.tests[key].valid;\n                } else {\n                  this.tests[id] = msg.tests[key];\n                }\n              }\n            } else {\n              for (var key in this.tests) {\n                if (key in msg.tests) {\n                  //console.log(msg.tests[key]);\n                  const id = msg.tests[key].id;\n                  if (id in this.tests) {\n                    this.tests[id].data = msg.tests[key].data;\n                    this.tests[id].valid = msg.tests[key].valid;\n                  } else {\n                    this.tests[id] = msg.tests[key];\n                  }\n                } else {\n                  this.tests[key].status = 0;\n                }\n              }\n            }\n          }\n        }\n      });\n      // console.log(\"control registered\")\n    },\n    init() {\n      //get running tests\n      fetch(this.url, { method: \"POST\", body: JSON.stringify({ command: 13 }) })\n        .then((data) => data.json())\n        .then((data) => {\n          if (data.success) {\n            this.tests = data.tests;\n          }\n        })\n        .catch(() => {\n          this.$emit(\"info\", \"Could not connect to server\", \"red\");\n        });\n      //get installing projects\n      fetch(this.url, { method: \"POST\", body: JSON.stringify({ command: 1 }) })\n        .then((data) => data.json())\n        .then((data) => {\n          if (data.success) {\n            this.projects = data.projects;\n          }\n        })\n        .catch(() => {\n          this.$emit(\"info\", \"Could not connect to server\", \"red\");\n        });\n      this.register();\n      this.socket.on(this.openfaasUrl + \"_control_test_delete\", (msg) => {\n        for (var i = 0; i < msg.length; i++) {\n          if (msg[i] in this.tests) {\n            delete this.tests[msg[i]];\n          }\n        }\n      });\n      this.socket.on(this.openfaasUrl + \"_control_test_stop\", (msg) => {\n        if (msg in this.tests) {\n          this.tests[msg].status = 0;\n        }\n      });\n    },\n    killRunningTasks() {\n      this.$root.setUpConfirmation(\n        \"Kill all running tasks? Istallation tasks will also be killed\",\n        \"Kill\",\n        () => {\n          fetch(this.url, {\n            method: \"POST\",\n            body: JSON.stringify({ command: 911 }),\n          })\n            .then((data) => data.json())\n            .then((data) => {\n              if (data.success) {\n                this.$emit(\"info\", \"Success\", \"green\");\n                for (var key in this.tests) {\n                  this.tests[key].status = 0;\n                }\n              } else {\n                this.$emit(\n                  \"info\",\n                  \"There was an error killing running tasks\",\n                  \"red\"\n                );\n              }\n            })\n            .catch(() => {\n              this.$emit(\"info\", \"Could not connect to server\", \"red\");\n            });\n        }\n      );\n    },\n    deleteAllProjects() {\n      this.$root.setUpConfirmation(\"Delete all projects?\", \"Delete\", () => {\n        fetch(this.url, {\n          method: \"POST\",\n          body: JSON.stringify({ command: 912 }),\n        })\n          .then((data) => data.json())\n          .then((data) => {\n            if (data.success) {\n              this.$emit(\"info\", \"Success\", \"green\");\n              this.socket.emit(\"clean_up\", {\n                openfaasurl: this.openfaasUrl,\n              });\n              this.tests = {};\n            } else {\n              this.$emit(\"info\", \"There was an error deleting projects\", \"red\");\n            }\n          })\n          .catch(() => {\n            this.$emit(\"info\", \"Could not connect to server\", \"red\");\n          });\n      });\n    },\n    restart(info, pid, sid) {\n      this.start(\n        info.users,\n        info.spawn_rate,\n        info.workers,\n        info.host,\n        info.time,\n        pid,\n        sid\n      );\n    },\n    start(users, spawnRate, workers, host, time, pid, sid) {\n      fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          command: 5,\n          project_name: pid,\n          script_name: sid,\n          users: parseInt(users),\n          spawn_rate: parseInt(spawnRate),\n          workers: parseInt(workers),\n          host: host,\n          time: parseInt(time),\n        }),\n      })\n        .then((data) => data.json())\n        .then((data) => {\n          if (data.success) {\n            const id = data.id;\n            const startedAt = data.started_at;\n            const info = JSON.stringify({\n              users: users,\n              spawn_rate: spawnRate,\n              host: host,\n              workers: workers,\n              time: time,\n              started_at: startedAt,\n            });\n            const status = 1;\n            const valid = true;\n            const test = {\n              id: id,\n              info: info,\n              status: status,\n              valid: valid,\n              project_name: pid,\n              script_name: sid,\n              data: JSON.stringify([]),\n            };\n            this.tests[id] = test;\n            this.socket.emit(\"test_start\", {\n              openfaasurl: this.openfaasUrl,\n              project_name: pid,\n              script_name: sid,\n              test: test,\n            });\n          }\n        })\n        .catch(() => {\n          this.$emit(\"info\", \"Could not connect to server\", \"red\");\n        });\n    },\n    deleteTest(id, pid, sid) {\n      delete this.tests[id];\n      this.socket.emit(\"test_delete\", {\n        openfaasurl: this.openfaasUrl,\n        project_name: pid,\n        script_name: sid,\n        ids: [id],\n      });\n    },\n    deleteProject(project) {\n      this.projects = this.projects.filter((p) => p !== project);\n    },\n  },\n  computed: {\n    reversedTests() {\n      return Object.entries(this.tests).reverse();\n    },\n  },\n  beforeUnmount() {\n    this.socket.emit(\"disconnect_control\");\n    this.socket.off(this.openfaasUrl + \"_control\");\n    this.socket.off(this.openfaasUrl + \"_control_test_delete\");\n    this.socket.off(this.openfaasUrl + \"_control_test_stop\");\n    // console.log(\"control disconnected\")\n  },\n  mounted() {\n    this.init();\n  },\n  updated() {\n    if (this.update) {\n      this.init();\n      this.$root.updated();\n    }\n  },\n};\n</script>\n\n<style>\n</style>"],"sourceRoot":""}]}