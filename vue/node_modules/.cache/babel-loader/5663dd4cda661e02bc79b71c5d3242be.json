{"remainingRequest":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/thread-loader/dist/cjs.js!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/babel-loader/lib/index.js!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/src/views/project/Script.vue?vue&type=template&id=0e44d84c","dependencies":[{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/src/views/project/Script.vue","mtime":1641563910572},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/babel.config.js","mtime":1641563910552},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/jadkhaddad/Schreibtisch/Openfaas-Performance-Testing-as-a-Service/vue/src/views/project/Script.vue"],"names":[],"mappings":";;AAIS,EAAA,KAAK,EAAC;;;8BACT,mBAAA,CAOS,QAPT,EAOS;AANP,EAAA,IAAI,EAAC,QAME;AALP,EAAA,KAAK,EAAC,iBAKC;AAJP,qBAAgB,OAIT;AAHP,qBAAgB;AAGT,CAPT,EAKC,SALD,EAOA,CAAA,CAPA,C;;;AA6CA,EAAA,KAAK,EAAC,Y;AACN,EAAA,EAAE,EAAC,O;AACH,EAAA,QAAQ,EAAC,I;AACT,qBAAgB,Y;AAChB,iBAAY;;;AAEP,EAAA,KAAK,EAAC;;;AACJ,EAAA,KAAK,EAAC;;;8BACT,mBAAA,CAEM,KAFN,EAEM;AAFD,EAAA,KAAK,EAAC;AAEL,CAFN,EAAyB,C,aACvB,mBAAA,CAAkD,IAAlD,EAAkD;AAA9C,EAAA,KAAK,EAAC,aAAwC;AAA1B,EAAA,EAAE,EAAC;AAAuB,CAAlD,EAAwC,OAAxC,CADuB,CAAzB,E,EAAA,C;;;AAGK,EAAA,KAAK,EAAC;;;AAGF,EAAA,KAAK,EAAC;;;8BAOT,mBAAA,CAAyD,OAAzD,EAAyD;AAAlD,EAAA,KAAK,EAAC,YAA4C;AAA/B,EAAA,GAAG,EAAC;AAA2B,CAAzD,EAA4C,OAA5C,EAAiD,CAAA,CAAjD,C;;;AAGG,EAAA,KAAK,EAAC;;;+BAOT,mBAAA,CAEC,OAFD,EAEC;AAFM,EAAA,KAAK,EAAC,YAEZ;AAFyB,EAAA,GAAG,EAAC;AAE7B,CAFD,EACG,YADH,EACa,CAAA,CADb,C;;;AAKG,EAAA,KAAK,EAAC;;;+BAOT,mBAAA,CAA6D,OAA7D,EAA6D;AAAtD,EAAA,KAAK,EAAC,YAAgD;AAAnC,EAAA,GAAG,EAAC;AAA+B,CAA7D,EAA8C,SAA9C,EAAqD,CAAA,CAArD,C;;+BAEF,mBAAA,CAEM,KAFN,EAEM;AAFD,EAAA,KAAK,EAAC,WAEL;AAFiB,EAAA,KAA4B,EAA5B;AAAA,sBAAA;AAAA;AAEjB,CAFN,EAAoD,8CAApD,EAEA,CAAA,CAFA,C;;;AAIK,EAAA,KAAK,EAAC;;;+BAOT,mBAAA,CAAuD,OAAvD,EAAuD;AAAhD,EAAA,KAAK,EAAC,YAA0C;AAA7B,EAAA,GAAG,EAAC;AAAyB,CAAvD,EAA2C,MAA3C,EAA+C,CAAA,CAA/C,C;;+BAEF,mBAAA,CAEM,KAFN,EAEM;AAFD,EAAA,KAAK,EAAC,WAEL;AAFiB,EAAA,KAA4B,EAA5B;AAAA,sBAAA;AAAA;AAEjB,CAFN,EAAoD,4DAApD,EAEA,CAAA,CAFA,C;;;AAIK,EAAA,KAAK,EAAC;;;+BAOT,mBAAA,CAEC,OAFD,EAEC;AAFM,EAAA,KAAK,EAAC,YAEZ;AAFyB,EAAA,GAAG,EAAC;AAE7B,CAFD,EACG,iBADH,EACkB,CAAA,CADlB,C;;;AAeF,EAAA,IAAI,EAAC,Q;AACL,EAAA,KAAK,EAAC,wB;AACN,sBAAiB,O;AACjB,EAAA,EAAE,EAAC,a;AACH,EAAA,GAAG,EAAC;;;;;uBAzIhB,mBAAA,CA+IM,KA/IN,EA+IM,IA/IN,EA+IM,CA9IJ,mBAAA,CAAiB,IAAjB,EAAiB,IAAjB,EAAiB,gBAAA,CAAV,KAAA,CAAA,EAAU,CAAjB,EAAS,CAAT,CA8II,EA5IJ,mBAAA,CAyBM,KAzBN,EAAA,UAAA,EAyBM,CAxBJ,UAwBI,EAhBJ,mBAAA,CAOS,QAPT,EAOS;AANP,IAAA,IAAI,EAAC,QAME;AALP,IAAA,KAAK,EAAC,gBAKC;AAJP,IAAA,EAAE,EAAC,mBAII;AAHN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,OAAA,IAAA,QAAA,CAAA,OAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAGC,GAPT,EAKC,YALD,CAgBI,EARJ,mBAAA,CAOS,QAPT,EAOS;AANP,IAAA,IAAI,EAAC,QAME;AALP,IAAA,KAAK,EAAC,gBAKC;AAJP,IAAA,EAAE,EAAC,qBAII;AAHN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,SAAA,IAAA,QAAA,CAAA,SAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAGC,GAPT,EAKC,cALD,CAQI,CAzBN,CA4II,G,kBAlHJ,mBAAA,CAiBQ,SAjBR,EAiBQ,IAjBR,EAiBQ,WAAA,CAhBS,QAAA,CAAA,aAgBT,EAhBsB,UAArB,IAAqB,EAAjB;yBADb,YAAA,CAiBQ,eAjBR,EAiBQ;AAfL,MAAA,GAAG,EAAE,IAAI,CAAA,CAAA,CAeJ;AAdL,MAAA,EAAE,EAAE,IAAI,CAAA,CAAA,CAcH;AAbL,MAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAA,CAAA,CAAJ,CAAQ,IAAnB,CAaD;AAZL,MAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAA,CAAA,CAAJ,CAAQ,IAAnB,CAYD;AAXL,MAAA,MAAM,EAAE,IAAI,CAAA,CAAA,CAAJ,CAAQ,MAWX;AAVL,MAAA,KAAK,EAAE,IAAI,CAAA,CAAA,CAAJ,CAAQ,KAUV;AATL,MAAA,QAAQ,EAAE,KASL;AARL,MAAA,GAAG,EAAE,MAAA,CAAA,GAQA;AAPL,MAAA,WAAW,EAAE,MAAA,CAAA,WAOR;AANL,MAAA,GAAG,EAAE,KAAA,CAAA,GAMA;AALL,MAAA,GAAG,EAAE,KAAA,CAAA,EAKA;AAJL,MAAA,cAAc,EAAE,MAAA,CAAA,aAIX;AAHL,MAAA,SAAO,EAAE,QAAA,CAAA,OAGJ;AAFL,MAAA,QAAM,EAAE,QAAA,CAAA,UAEH;AADL,MAAA,MAAI,EAAA,gBAAA,MAAA;AAAA,eAAE,QAAA,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA,CAAT,CAAF;AAAA;AACC,KAjBR,E,IAAA,E,CAAA,E,kIAAA,C;GAiBQ,CAjBR,E,GAAA,CAkHI,GA/FJ,mBAAA,CA8FM,KA9FN,EAAA,UAAA,EA8FM,CAvFJ,mBAAA,CAsFM,KAtFN,EAAA,UAAA,EAsFM,CArFJ,mBAAA,CAoFM,KApFN,EAAA,UAAA,EAoFM,CAnFJ,UAmFI,EAhFJ,mBAAA,CA+EM,KA/EN,EAAA,UAAA,EA+EM,CA9EJ,mBAAA,CAsEO,MAtEP,EAsEO,IAtEP,EAsEO,CApEL,mBAAA,CAQM,KARN,EAAA,UAAA,EAQM,C,gBAPJ,mBAAA,CAKE,OALF,EAKE;AAJA,IAAA,IAAI,EAAC,MAIL;AAHA,IAAA,EAAE,EAAC,aAGH;AAFA,IAAA,KAAK,EAAC,cAEN;;aADS,KAAA,CAAA,K,GAAK,M;;AACd,GALF,E,IAAA,E,GAAA,C,iBAIW,KAAA,CAAA,K,GAGP,EADJ,UACI,CARN,CAoEK,EA1DL,mBAAA,CAUM,KAVN,EAAA,WAAA,EAUM,C,gBATJ,mBAAA,CAKE,OALF,EAKE;AAJA,IAAA,IAAI,EAAC,MAIL;AAHA,IAAA,EAAE,EAAC,kBAGH;AAFA,IAAA,KAAK,EAAC,cAEN;;aADS,KAAA,CAAA,S,GAAS,M;;AAClB,GALF,E,IAAA,E,GAAA,C,iBAIW,KAAA,CAAA,S,GAKP,EAHJ,WAGI,CAVN,CA0DK,EA9CL,mBAAA,CAQM,KARN,EAAA,WAAA,EAQM,C,gBAPJ,mBAAA,CAKE,OALF,EAKE;AAJA,IAAA,IAAI,EAAC,MAIL;AAHA,IAAA,EAAE,EAAC,eAGH;AAFA,IAAA,KAAK,EAAC,cAEN;;aADS,KAAA,CAAA,O,GAAO,M;;AAChB,GALF,E,IAAA,E,GAAA,C,iBAIW,KAAA,CAAA,O,GAGP,EADJ,WACI,CARN,CA8CK,EArCL,WAqCK,EAjCL,mBAAA,CAQM,KARN,EAAA,WAAA,EAQM,C,gBAPJ,mBAAA,CAKE,OALF,EAKE;AAJA,IAAA,IAAI,EAAC,MAIL;AAHA,IAAA,EAAE,EAAC,YAGH;AAFA,IAAA,KAAK,EAAC,cAEN;;aADS,KAAA,CAAA,I,GAAI,M;;AACb,GALF,E,IAAA,E,GAAA,C,iBAIW,KAAA,CAAA,I,GAGP,EADJ,WACI,CARN,CAiCK,EAxBL,WAwBK,EApBL,mBAAA,CAUM,KAVN,EAAA,WAAA,EAUM,C,gBATJ,mBAAA,CAKE,OALF,EAKE;AAJA,IAAA,IAAI,EAAC,MAIL;AAHA,IAAA,EAAE,EAAC,YAGH;AAFA,IAAA,KAAK,EAAC,cAEN;;aADS,KAAA,CAAA,I,GAAI,M;;AACb,GALF,E,IAAA,E,GAAA,C,iBAIW,KAAA,CAAA,I,GAKP,EAHJ,WAGI,CAVN,CAoBK,EARL,mBAAA,CAOS,QAPT,EAOS;AANP,IAAA,IAAI,EAAC,QAME;AALP,IAAA,KAAK,EAAC,2BAKC;AAJP,IAAA,EAAE,EAAC,WAII;AAHN,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,cAAA,IAAA,QAAA,CAAA,cAAA,OAAA,QAAA,YAAF;AAAA,KAAA;AAGC,GAPT,EAKC,SALD,CAQK,CAtEP,CA8EI,EAPJ,mBAAA,CAMU,QANV,EAAA,WAAA,EAMU,IANV,EAMU,GANV,CAOI,CA/EN,CAgFI,CApFN,CAqFI,CAtFN,CAuFI,CA9FN,CA+FI,CA/IN,C","sourcesContent":["<template>\n  <div>\n    <h3>{{ id }}</h3>\n    <!-- Button trigger modal -->\n    <div class=\"btn-container\">\n      <button\n        type=\"button\"\n        class=\"btn btn-primary\"\n        data-mdb-toggle=\"modal\"\n        data-mdb-target=\"#Modal\"\n      >\n        Start\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-danger\"\n        id=\"stop-script-tests\"\n        @click=\"stopAll\"\n      >\n        Stop all\n      </button>\n      <button\n        type=\"button\"\n        class=\"btn btn-danger\"\n        id=\"delete-script-tests\"\n        @click=\"deleteAll\"\n      >\n        Delete all\n      </button>\n    </div>\n    <Test\n      v-for=\"test in reversedTests\"\n      :key=\"test[0]\"\n      :id=\"test[0]\"\n      :info=\"JSON.parse(test[1].info)\"\n      :data=\"JSON.parse(test[1].data)\"\n      :status=\"test[1].status\"\n      :valid=\"test[1].valid\"\n      :showPath=\"false\"\n      :url=\"url\"\n      :openfaasUrl=\"openfaasUrl\"\n      :pid=\"pid\"\n      :sid=\"id\"\n      :startMinimized=\"minimizeTests\"\n      @restart=\"restart\"\n      @delete=\"deleteTest\"\n      @stop=\"stop(test[0])\"\n    ></Test>\n    <!-- Modal -->\n    <div\n      class=\"modal fade\"\n      id=\"Modal\"\n      tabindex=\"-1\"\n      aria-labelledby=\"ModalLabel\"\n      aria-hidden=\"true\"\n    >\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"ModalLabel\">Start</h5>\n          </div>\n          <div class=\"modal-body\">\n            <form>\n              <!-- Users input -->\n              <div class=\"form-outline mb-4\">\n                <input\n                  type=\"text\"\n                  id=\"users-input\"\n                  class=\"form-control\"\n                  v-model=\"users\"\n                />\n                <label class=\"form-label\" for=\"users-input\">Users</label>\n              </div>\n              <!-- Spawn rate input -->\n              <div class=\"form-outline mb-4\">\n                <input\n                  type=\"text\"\n                  id=\"spawn-rate-input\"\n                  class=\"form-control\"\n                  v-model=\"spawnRate\"\n                />\n                <label class=\"form-label\" for=\"spawn-rate-input\"\n                  >Spawn rate</label\n                >\n              </div>\n              <!-- Workers input -->\n              <div class=\"form-outline mb-4\">\n                <input\n                  type=\"text\"\n                  id=\"workers-input\"\n                  class=\"form-control\"\n                  v-model=\"workers\"\n                />\n                <label class=\"form-label\" for=\"workers-input\">Workers</label>\n              </div>\n              <div class=\"form-text\" style=\"padding-bottom: 10px\">\n                This will overwrite all hosts in your file\n              </div>\n              <!-- Host input -->\n              <div class=\"form-outline mb-4\">\n                <input\n                  type=\"text\"\n                  id=\"host-input\"\n                  class=\"form-control\"\n                  v-model=\"host\"\n                />\n                <label class=\"form-label\" for=\"host-input\">Host</label>\n              </div>\n              <div class=\"form-text\" style=\"padding-bottom: 10px\">\n                If time is not set, the test will not stop automatically\n              </div>\n              <!-- Time input -->\n              <div class=\"form-outline mb-4\">\n                <input\n                  type=\"text\"\n                  id=\"time-input\"\n                  class=\"form-control\"\n                  v-model=\"time\"\n                />\n                <label class=\"form-label\" for=\"time-input\"\n                  >Time in seconds</label\n                >\n              </div>\n              <!-- Submit button -->\n              <button\n                type=\"button\"\n                class=\"btn btn-primary btn-block\"\n                id=\"start-btn\"\n                @click=\"startFromModal\"\n              >\n                Start\n              </button>\n            </form>\n            <button\n              type=\"button\"\n              class=\"btn btn-primary hidden\"\n              data-mdb-dismiss=\"modal\"\n              id=\"dismiss-btn\"\n              ref=\"dismiss\"\n            ></button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Test from \"@/components/Test.vue\";\n\nexport default {\n  name: \"Script\",\n  components: {\n    Test,\n  },\n  props: [\"url\", \"openfaasUrl\", \"socket\", \"minimizeTests\", \"update\"],\n  data() {\n    return {\n      id: this.$route.params.id,\n      pid: this.$route.params.pid,\n      tests: {},\n      users: \"\",\n      spawnRate: \"\",\n      workers: \"\",\n      host: \"\",\n      time: \"\",\n    };\n  },\n  methods: {\n    register(test_ids) {\n      this.socket.off(this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id);\n      this.socket.emit(\"register_script\", {\n        openfaasurl: this.openfaasUrl,\n        project_name: this.pid,\n        script_name: this.id,\n        test_ids: test_ids,\n      });\n      this.socket.on(\n        this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id,\n        (msg) => {\n          if (IsJsonString(msg)) {\n            msg = JSON.parse(msg);\n            //console.log(msg);\n            if (msg.success) {\n              for (var i = 0; i < msg.tests.length; i++) {\n                const id = msg.tests[i].id;\n                if (id in this.tests) {\n                  const status = msg.tests[i].status;\n                  if (status === 0) {\n                    // not running\n                    this.disconnectTest(id);\n                    this.tests[id].status = 0;\n                  } else if (status === 1) {\n                    this.tests[id].data = msg.tests[i].data;\n                  } else if (status === 3) {\n                    // console.log(\"not valid\");\n                    this.tests[id].valid = false;\n                    this.$emit(\n                      \"info\",\n                      id + \": There was an error running this test\",\n                      \"red\"\n                    );\n                    this.disconnectTest(id);\n                  }\n                }\n              }\n            }\n          }\n        }\n      );\n      // console.log(\"script registered\");\n    },\n    registerTest(test_id) {\n      this.socket.emit(\"register_test\", {\n        openfaasurl: this.openfaasUrl,\n        project_name: this.pid,\n        script_name: this.id,\n        test_id: test_id,\n      });\n    },\n    disconnectTest(test_id) {\n      // console.log(\"disconnecting\");\n      this.socket.emit(\"disconnect_test\", {\n        openfaasurl: this.openfaasUrl,\n        project_name: this.pid,\n        script_name: this.id,\n        test_id: test_id,\n      });\n    },\n    init() {\n      //get host\n      this.host = localStorage.getItem(\"last_host\");\n      //mdb init\n      document.querySelectorAll(\".form-outline\").forEach((formOutline) => {\n        new mdb.Input(formOutline).init();\n      });\n      fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          command: 7,\n          project_name: this.pid,\n          script_name: this.id,\n        }),\n      })\n        .then((data) => data.json())\n        .then((data) => {\n          if (data.success) {\n            //console.log(data)\n            var test_ids = [];\n            for (var test_id in data.tests) {\n              if (data.tests[test_id].status === 1) {\n                test_ids.push(data.tests[test_id].id);\n              }\n            }\n            this.register(test_ids);\n            // console.log(\"registering: \", test_ids);\n            this.tests = data.tests;\n          }\n        })\n        .catch((e) => {\n          // console.log(e);\n          this.$emit(\"info\", \"Could not connect to server\", \"red\");\n        });\n      this.socket.on(\n        this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id + \"_test_start\",\n        (msg) => {\n          // console.log(msg.id in this.tests);\n          if (msg.id in this.tests) return;\n          this.tests[msg.id] = msg;\n          this.registerTest(msg.id);\n        }\n      );\n      this.socket.on(\n        this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id + \"_test_delete\",\n        (msg) => {\n          // console.log(msg);\n          for (var i = 0; i < msg.length; i++) {\n            if (msg[i] in this.tests) {\n              delete this.tests[msg[i]];\n              this.disconnectTest(msg[i]);\n            }\n          }\n        }\n      );\n      this.socket.on(\n        this.openfaasUrl + \"_project_delete_\" + this.pid,\n        (msg) => {\n          this.$emit(\"info\", this.pid + \" is deleted\", \"green\");\n          this.$router.push({ name: \"Home\" });\n        }\n      );\n    },\n    stopAll() {\n      this.$root.setUpConfirmation(\n        this.id + \": Are you sure you want to stop all tests?\",\n        \"Stop\",\n        () => {\n          fetch(this.url, {\n            method: \"POST\",\n            body: JSON.stringify({\n              command: 17,\n              project_name: this.pid,\n              script_name: this.id,\n            }),\n          })\n            .then((data) => data.json())\n            .then((data) => {\n              if (data.success) {\n                this.$emit(\"info\", \"Success\", \"green\");\n                this.socket.emit(\"disconnect_script\", {\n                  project_name: this.pid,\n                  script_name: this.id,\n                });\n                for (var key in this.tests) {\n                  this.tests[key].status = 0;\n                }\n              } else {\n                this.$emit(\"info\", \"There was an error stopping tests\", \"red\");\n              }\n            })\n            .catch(function () {\n              this.$emit(\"info\", \"Could not connect to server\", \"red\");\n            });\n        }\n      );\n    },\n    deleteAll() {\n      this.$root.setUpConfirmation(\n        this.id + \": Are you sure you want to delete all tests?\",\n        \"Delete\",\n        () => {\n          fetch(this.url, {\n            method: \"POST\",\n            body: JSON.stringify({\n              command: 16,\n              project_name: this.pid,\n              script_name: this.id,\n            }),\n          })\n            .then((data) => data.json())\n            .then((data) => {\n              if (data.success) {\n                this.$emit(\"info\", \"Success\", \"green\");\n                this.socket.emit(\"disconnect_script\", {\n                  project_name: this.pid,\n                  script_name: this.id,\n                });\n                this.socket.emit(\"test_delete\", {\n                  openfaasurl: this.openfaasUrl,\n                  project_name: this.pid,\n                  script_name: this.id,\n                  ids: Object.keys(this.tests),\n                });\n                this.tests = {};\n              } else {\n                this.$emit(\"info\", \"There was an error deleting tests\", \"red\");\n              }\n            })\n            .catch(function () {\n              this.$emit(\"info\", \"Could not connect to server\", \"red\");\n            });\n        }\n      );\n    },\n    start(users, spawnRate, workers, host, time) {\n      fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify({\n          command: 5,\n          project_name: this.pid,\n          script_name: this.id,\n          users: parseInt(users),\n          spawn_rate: parseInt(spawnRate),\n          workers: parseInt(workers),\n          host: host,\n          time: parseInt(time),\n        }),\n      })\n        .then((data) => data.json())\n        .then((data) => {\n          if (data.success) {\n            const id = data.id;\n            const startedAt = data.started_at;\n            const info = JSON.stringify({\n              users: users,\n              spawn_rate: spawnRate,\n              host: host,\n              workers: workers,\n              time: time,\n              started_at: startedAt,\n            });\n            const status = 1;\n            const valid = true;\n            const test = {\n              id: id,\n              info: info,\n              status: status,\n              valid: valid,\n              data: JSON.stringify([]),\n            };\n            // console.log(test);\n            this.tests[id] = test;\n            // console.log(\"started: \", test);\n            this.registerTest(id);\n            this.socket.emit(\"test_start\", {\n              openfaasurl: this.openfaasUrl,\n              project_name: this.pid,\n              script_name: this.id,\n              test: test,\n            });\n          } else {\n            this.$emit(\"info\", data.message, \"red\");\n          }\n        })\n        .catch(() => {\n          this.$emit(\"info\", \"Could not connect to server\", \"red\");\n        });\n    },\n    startFromModal() {\n      if (this.host != null) {\n        this.host = this.host.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (this.host != \"\") {\n          this.host = \"http://\" + this.host;\n        }\n      }\n      // handle false inputs\n      if (this.users === \"\") {\n        this.$emit(\"info\", \"Users cant be empty\", \"red\");\n        return false;\n      }\n      if (!isInteger(this.users)) {\n        this.$emit(\"info\", \"Users must be an integer\", \"red\");\n        return false;\n      }\n      if (this.spawnRate === \"\") {\n        this.$emit(\"info\", \"Spawn rate cant be empty\", \"red\");\n        return false;\n      }\n      if (!isInteger(this.spawnRate)) {\n        this.$emit(\"info\", \"Spawn rate must be an integer\", \"red\");\n        return false;\n      }\n      if (this.workers !== \"\" && !isInteger(this.workers)) {\n        this.$emit(\"info\", \"workers must be an integer\", \"red\");\n        return false;\n      }\n\n      if (this.time != \"\") {\n        if (!isInteger(this.time)) {\n          this.$emit(\"info\", \"Time must be an integer\", \"red\");\n          return false;\n        }\n      }\n      this.$refs.dismiss.click();\n      if (this.host != \"\" && this.host != null) {\n        localStorage.setItem(\"last_host\", this.host);\n      }\n      this.start(\n        this.users,\n        this.spawnRate,\n        this.workers,\n        this.host,\n        this.time\n      );\n    },\n    restart(info) {\n      this.start(\n        info.users,\n        info.spawn_rate,\n        info.workers,\n        info.host,\n        info.time\n      );\n    },\n    deleteTest(id) {\n      delete this.tests[id];\n      this.socket.emit(\"test_delete\", {\n        openfaasurl: this.openfaasUrl,\n        project_name: this.pid,\n        script_name: this.id,\n        ids: [id],\n      });\n      this.disconnectTest(id);\n    },\n    stop(id) {\n      this.socket.emit(\"test_stop\", {\n        openfaasurl: this.openfaasUrl,\n        id: id,\n      });\n    },\n  },\n  computed: {\n    reversedTests() {\n      return Object.entries(this.tests).reverse();\n    },\n  },\n  beforeUnmount() {\n    this.socket.emit(\"disconnect_script\", {\n      project_name: this.pid,\n      script_name: this.id,\n    });\n    this.socket.off(this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id);\n    this.socket.off(\n      this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id + \"_test_start\"\n    );\n    this.socket.off(\n      this.openfaasUrl + \"_\" + this.pid + \"_\" + this.id + \"_test_delete\"\n    );\n    this.socket.off(this.openfaasUrl + \"_project_delete_\" + this.pid);\n    // console.log(\"script disconnected\");\n  },\n  mounted() {\n    this.init();\n  },\n  updated() {\n    if (this.update) {\n      this.init();\n      this.$root.updated();\n    }\n  },\n};\n</script>\n\n<style>\n</style>"],"sourceRoot":""}]}